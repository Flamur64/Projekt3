#!/usr/bin/env node

const fs = require("fs-extra");
const path = require("path");

try {
  const srcDir = path.join(__dirname, "../src");
  const destDir = path.join(process.cwd(), "src");

  fs.ensureDirSync(destDir);
  fs.copySync(srcDir, destDir);
  try {
    fs.copyFileSync(
      path.join(__dirname, "..", ".env.default"),
      path.join(process.cwd(), ".env")
    );
  } catch (e) {}
  try {
    fs.copyFileSync(
      path.join(__dirname, "..", "tsconfig.json"),
      path.join(process.cwd(), "tsconfig.json")
    );
  } catch (e) {}
  try {
    fs.copyFileSync(
      path.join(__dirname, "..", ".gitignore"),
      path.join(process.cwd(), ".gitignore")
    );
  } catch (e) {}
  try {
    fs.mkdirSync(path.join(process.cwd(), "db"));
  } catch (e) {}

  try {
    const userPackagejson = require(path.join(process.cwd(), "package.json"));
    const packagejson = require(path.join(__dirname, "..", "package.json"));
    userPackagejson.scripts = {
      ...packagejson.scripts,
      "start:dev": "nodemon src/app.ts",
      "start:prod": "node src/app.js",
    };
    userPackagejson.dependencies = {
      ...userPackagejson.dependencies,
      ...packagejson.dependencies,
    };
    userPackagejson.devDependencies = {
      ...userPackagejson.devDependencies,
      ...packagejson.devDependencies,
    };
    fs.writeFileSync(
      path.join(process.cwd(), "package.json"),
      JSON.stringify(userPackagejson, null, 2)
    );
  } catch (e) {}

  try {
    //try to install dependencies
    const { execSync } = require("child_process");
    //check if yarn.lock exists
    if (fs.existsSync(path.join(process.cwd(), "yarn.lock"))) {
      execSync("yarn install", { stdio: "inherit" });
    } else {
      execSync("npm install", { stdio: "inherit" });
    }
  } catch (e) {}

  console.log("Template project was initialized");
} catch (e) {
  console.error(
    "Some error occurred while initializing template project, Error: ",
    e
  );
}
